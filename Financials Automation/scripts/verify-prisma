#!/usr/bin/env node

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

console.log('üîç Verifying Prisma setup...');

// Check if Prisma schema exists
const schemaPath = path.join(process.cwd(), 'prisma', 'schema.prisma');
if (!fs.existsSync(schemaPath)) {
  console.error('‚ùå Prisma schema not found at prisma/schema.prisma');
  process.exit(1);
}
console.log('‚úÖ Prisma schema found');

// Check if .env file exists and has DATABASE_URL
const envPath = path.join(process.cwd(), '.env');
if (!fs.existsSync(envPath)) {
  console.error('‚ùå .env file not found');
  process.exit(1);
}

const envContent = fs.readFileSync(envPath, 'utf8');
if (!envContent.includes('DATABASE_URL=')) {
  console.error('‚ùå DATABASE_URL not found in .env file');
  process.exit(1);
}
console.log('‚úÖ DATABASE_URL configured');

// Determine the Prisma CLI command (try npx/pnpm first, then local)
const prismaBin = path.join(process.cwd(), 'node_modules', '.bin', 'prisma');
const prismaCmd = fs.existsSync(prismaBin) ? `"${prismaBin}"` : 'npx prisma';

// Validate Prisma schema
try {
  execSync(`${prismaCmd} validate`, { stdio: 'pipe', shell: true });
  console.log('‚úÖ Prisma schema is valid');
} catch (error) {
  console.error('‚ùå Prisma schema validation failed:', error.message);
  process.exit(1);
}

// Generate Prisma client
try {
  console.log('üîÑ Generating Prisma client...');
  execSync(`${prismaCmd} generate`, { stdio: 'inherit', shell: true });
  console.log('‚úÖ Prisma client generated successfully');
} catch (error) {
  console.error('‚ùå Prisma client generation failed:', error.message);
  process.exit(1);
}

// Check if Prisma client files exist
// Check custom output location first (from schema.prisma)
const customClientPath = path.join(process.cwd(), 'src', 'generated', 'prisma');
const defaultClientPath = path.join(process.cwd(), 'node_modules', '.prisma', 'client');

let clientPath = null;
if (fs.existsSync(customClientPath)) {
  clientPath = customClientPath;
  console.log('‚úÖ Prisma client files found in custom location (src/generated/prisma)');
} else if (fs.existsSync(defaultClientPath)) {
  clientPath = defaultClientPath;
  console.log('‚úÖ Prisma client files found in default location (node_modules/.prisma/client)');
} else {
  console.error('‚ùå Prisma client not found in either:');
  console.error('   - src/generated/prisma (custom location)');
  console.error('   - node_modules/.prisma/client (default location)');
  process.exit(1);
}

// Verify client files exist
console.log('Make sure Prisma client is generated to src/generated/prisma');

// Additional check: verify that index.js or index.d.ts exists in the client path
const indexJsPath = path.join(clientPath, 'index.js');
const indexDtsPath = path.join(clientPath, 'index.d.ts');

if (fs.existsSync(indexJsPath) || fs.existsSync(indexDtsPath)) {
  console.log('‚úÖ Prisma client index files verified');
} else {
  console.error('‚ùå Prisma client index files not found');
  process.exit(1);
}

console.log('üéâ Prisma setup verification completed successfully!');
